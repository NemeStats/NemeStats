@using UI.Controllers.Helpers
@using UI.HtmlHelpers
@model UI.Models.GamingGroup.GamingGroupViewModel
@{
    ViewBag.Title = Model.PublicDetailsView.GamingGroupName;
    ViewBag.Description = $"View stats, recent plays, and other details about the Gaming Group '{Model.PublicDetailsView.GamingGroupName}' on NemeStats.";
    Layout = MVC.Shared.Views._BaseLayout;
}

<h2 class="page-header">
    @Model.PublicDetailsView.GamingGroupName
    @if (Model.UserCanEdit)
    {
        <a href="@Url.Action(MVC.GamingGroup.Edit().AddRouteValue("id", Model.PublicDetailsView.GamingGroupId))" class="btn btn-xs btn-default">
            <span class="fa fa-pencil"></span>&nbsp;Edit
        </a>
    }
</h2>

    @Html.Partial(MVC.GamingGroup.Views._GamingGroupPublicDetailsPartial, Model.PublicDetailsView, new ViewDataDictionary { { "canEdit", Model.UserCanEdit } })

<hr/>
@Html.RenderTempDataMessage(TempMessageKeys.CREATE_GAMEDEFITION_RESULT_TEMPMESSAGE)
@Html.RenderTempDataMessage(TempMessageKeys.TEMP_MESSAGE_KEY_PLAYER_INVITED)
@Html.RenderTempDataMessage(TempMessageKeys.TEMP_MESSAGE_KEY_PLAYED_GAME_RECORDED)
@Html.RenderTempDataMessage(TempMessageKeys.TEMP_MESSAGE_KEY_PLAYER_DELETED)

<div class="well well-sm filter">
    <div class="control-block">
        <div>
            <label for="from-date-picker">Filter Data From:</label>
            <i class="fa fa-question-circle" data-toggle="popover" data-placement="top" data-content="All data will be filtered to be on or after this date."></i>
        </div>
        <div>
            @Html.ValidationMessage("Iso8601FromDate")
            <input class="form-control input-sm" type="date" id="from-date-picker" name="Iso8601FromDate" value="@Model.DateRangeFilter.Iso8601FromDate"/>
        </div>
    </div>
    <div class="control-block">
        <div>
            <label for="to-date-picker">Ending Date:</label>
            <i class="fa fa-question-circle" data-toggle="popover" data-placement="top" data-content="All data will be filtered to be on or before this date."></i>
        </div>
        <div>
            @Html.ValidationMessage("Iso8601ToDate")
            <input class="form-control input-sm" type="date" id="to-date-picker" name="Iso8601ToDate" value="@Model.DateRangeFilter.Iso8601ToDate"/>
        </div>
    </div>
    <div class="control-block">
        <button class="btn btn-primary btn-sm" id="dateFilterButton"><span class="fa fa-filter"></span> Filter Statistics</button>
        @Html.ValidationMessage("dateRangeFilter")
    </div>
</div>


<div id="neme-tab" class="container">
    <ul class="nav nav-pills">
        <li class="active"><a href="#playersListDivId" data-toggle="tab" id="playersTab">Players</a></li>
        <li><a href="#gamesListDivId" data-toggle="tab" id="gamesTab">Games</a></li>
        <li><a href="#playedGamesListDivId" data-toggle="tab" id="playedGamesTab">Plays</a></li>
        <li><a href="#statsDivId" data-toggle="tab" id="statsTab">Stats</a></li>

    </ul>

    <div class="tab-content clearfix">
        <div class="tab-pane active" id="playersListDivId">
            <div class="loader"></div>
        </div>
        <div class="tab-pane" id="gamesListDivId">
            <div class="loader"></div>
        </div>
        <div class="tab-pane" id="playedGamesListDivId">
            <div class="loader"></div>
        </div>
        <div class="tab-pane" id="statsDivId">
            <div class="loader" id="statsLoader"></div>
            <div class="loader" id="graphLoader"></div>
        </div>
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/d3")
    @Styles.Render("~/bundles/d3/css")
    @Scripts.Render("~/bundles/moment")

    <script type="text/javascript">
        //Creation
        $(document).ready(function () {
            var fromDate = new Date(@Model.DateRangeFilter.FromDate.Year, (@Model.DateRangeFilter.FromDate.Month - 1), @Model.DateRangeFilter.FromDate.Day);

            var toDate;
            @if(Model.DateRangeFilter.HasCustomDate)
            {
                @:toDate = new Date(@Model.DateRangeFilter.ToDate.Year, (@Model.DateRangeFilter.ToDate.Month - 1), @Model.DateRangeFilter.ToDate.Day);
            }
            else
            {
                @:toDate = new moment().toDate();
            }

            var gamingGroupView = new Views.GamingGroup.GamingGroupView();

            var googleAnalyticsObject = new window.Views.Shared.GoogleAnalytics();

            var options = {
                fromDate : fromDate,
                toDate : toDate,
                gamingGroupId : @Model.PublicDetailsView.GamingGroupId,
                playersTabId : "playersTab",
                playersDivId : "playersListDivId",
                gamesTabId: "gamesTab",
                dateFilterButtonId: "dateFilterButton",
                gamesDivId: "gamesListDivId",
                playedGamesTabId: "playedGamesTab",
                playedGamesDivId: "playedGamesListDivId",
                statsTabId: "statsTab",
                statsDivId: "statsDivId"
            };
            gamingGroupView.init(googleAnalyticsObject, options);

            var recordexceldownload = new window.Views._PlayedGamesPartial.EventTracking();
            recordexceldownload.init(googleAnalyticsObject);
        });
    </script>
}
